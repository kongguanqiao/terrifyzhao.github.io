---
layout: post
title: 'Rasa使用指南02'
subtitle: 'Rasa使用指南02'
date: 2019-02-26
categories: NLP
cover: 'https://raw.githubusercontent.com/terrifyzhao/terrifyzhao.github.io/master/assets/img/2019-02-26-Rasa%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%9702/cover.jpg'
tags: NLP
---

## **前言**

最近工作很忙，重心也一直在模型方面，例如BERT、GPT-2等等，对于Rasa系列的博文实在是没有时间更新。最近有不停的收到一些小伙伴发来的信息，希望能看到Rasa使用指南02，既然如此，那就满足各位好了，近期也会花更多的时间来更新此系列的内容，如果您对此系列的文章感兴趣那就给我一个评论、一个点赞吧，你门的支持也是我更新的最大动力。

## **简述**

本节的内容主要是再深入讲解一下Rasa core并把上一节未提到的Slot即填槽讲解一下。

## **Actions**

说到多轮会话那肯定离不开填槽，但是怎么根据槽值来返回答案也是一个问题，所以在开始讲解slot之前，我们要先看一下actions。

回忆一下domain，domain当中有一个属性叫做actions，actions是根据用户的输入返回给用户的答案，我们在上文中提到，actions是以utter开头的，但其实actions并不只有这一种定义方法，在Rasa Core中有三种类型的actions，分别为

+ **default actions** ，系统默认提供的action
+ **utter actions**, 以 `utter_`作为开头, 该action只能用于给用户返回信息
+ **custom actions** - 自定义的action，该action可运行任意的代码


### **default actions**

default actions包含三个`action_listen`, `action_restart`, `action_default_fallback`

### **utter actions**

如果你要给用户直接返回一条文本信息，那么action需要用`UtterAction`，并且采用`utter_`的前缀，如果没有这个前缀，那这个action就会被识别为custom actions，系统就没法直接把action中定义好的文本返回给用户。

### **custom actions**

custom actions表示的是用户自定义的action，这个action需要配合代码一起使用，它能返回任何你想返回的内容，甚至一些操作，例如你的对话系统连接到了你的灯泡，你可以通过custom actions来自动打开灯，当然了，你也可以用该方法来反问文本，达到和utter actions一样的效果。

custom actions还有一种用法，`action_endpoint`，你可采用这种方法来直接调用服务端的接口，接口可以用任何语言编写，该方法需要定义在`endpoints.yml`文件中
```
action_endpoint:
  url: "http://localhost:5055/webhook"
```

当然，官方也提供了一个小的python sdk来编写这样的接口，我们来看一下


## 未完待续...本周内会更新完




















